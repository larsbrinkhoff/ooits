#!/usr/bin/env python

import sys
import time
import pexpect

def type(p, s):
    for c in s:
        p.send(c)
        time.sleep(0.1)

def main():
    pexpect.run('itstar cOf ai-minsys.tape _ sys sysbin syseng backup jsf pj _tape0 _tape1')

    p = pexpect.spawn('../BIN/pdp10-ka ai-magdmp.simh')
    p.logfile = sys.stdout
    p.expect('MAGDMP\r\n')
    type(p, 'l\033ddt\r')
    p.expect('\n')
    type(p, 't\033salv bin\r')

    p.expect('\n')
    type(p, 'mark\033g')
    p.expect('FORMAT PACK ON DRIVE #')
    type(p, '0')
    p.expect('PACK NO =')
    type(p, '0\r')
    p.expect('PACK ID =')
    type(p, '0\r')
    p.expect('SWAPPING ALLOC =')
    type(p, '3000\r')

    p.expect('DDT\r\n')
    type(p, 'mark\033g')
    p.expect('FORMAT PACK ON DRIVE #')
    type(p, '1')
    p.expect('PACK NO =')
    type(p, '1\r')
    p.expect('PACK ID =')
    type(p, '1\r')
    p.expect('SWAPPING ALLOC =')
    type(p, '3000\r')

    p.expect('DDT\r\n')
    type(p, 'mark\033g')
    p.expect('FORMAT PACK ON DRIVE #')
    type(p, '2')
    p.expect('PACK NO =')
    type(p, '2\r')
    p.expect('PACK ID =')
    type(p, '2\r')
    p.expect('SWAPPING ALLOC =')
    type(p, '3000\r')

    p.expect('DDT\r\n')
    type(p, 'chkr\033g')
    p.expect('ACTIVE UNITS ARE:')
    type(p, '012\r')
    p.expect('USE MFD FROM UNIT:')
    type(p, '0')
    p.expect('CHECK FILES FOR CLOBBERED BLOCKS?')
    type(p, 'Y')
    p.expect('UPDATE POINTERS?')
    type(p, 'Y')
    p.expect('GET USR DIRS FROM MASTER DSK?')
    type(p, 'Y')
    p.expect('PRINT ALL DIRS?')
    type(p, 'Y')
    p.expect_exact('TUT FOR DRIVE # (A FOR ALL)')
    type(p, 'A')
    p.expect('WRITE?')
    type(p, 'Y')
    p.expect('WRITE?')
    type(p, 'Y')
    p.expect('WRITE?')
    type(p, 'Y')

    p.expect('DDT\r\n')
    type(p, 'tran\033g')
    p.expect('ONTO DRIVE #')
    type(p, '0')

    p.expect('EOT\r\nDDT\r\n')
    type(p, 'mfdr\033g')
    p.expect('RECONSTRUCT MFD FROM UNIT #')
    type(p, '0')
    p.expect_exact('WRITE?')
    type(p, 'Y')
    p.expect('DDT\r\n')

    p.close(force=True)

    p = pexpect.spawn('../BIN/pdp10-ka dskdmp.simh')
    p.logfile = sys.stdout

    time.sleep(3)
    type(p, 'its724 bin\r')
    p.expect('\n')
    type(p, 'GO\033G')
    p.expect('IN OPERATION')
    type(p, '\032')
    p.expect('USERS\r\n')
    type(p, 'foo\033u')
    p.expect('\r\n')
    type(p, 'midas\033j')
    p.expect('\r\n')
    type(p, '\033l')
    p.expect(' ')
    type(p, 'sysbin; mmidas bin\r')
    p.expect('\r\n\r\n')
    type(p, 'purify\033g')
    p.expect('PURIFIED')
    p.expect('\r\n\r\n')
    type(p, ':pdump sys; ts midas\r')
    p.expect('\r\n\r\n')
    type(p, '\033\030.')
    p.expect('\r\n')

    type(p, ':midas\r')
    p.expect_exact('MIDAS.')
    p.expect('\r\n')
    type(p, 'SYS; TS PDSET_SYSENG; PDSET\r')
    p.expect(':KILL')
    
    type(p, ':pdset\r')
    p.expect_exact('PDSET.')
    p.expect('\r\n')
    type(p, '720420D')
    p.expect('\r\n')
    type(p, '123456T')
    p.expect('\r\n')
    type(p, '!.')
    p.expect('\r\n')
    type(p, '\032\033\030.')
    p.expect('\r\n')

    type(p, ':midas\r')
    p.expect_exact('MIDAS.')
    p.expect('\r\n')
    type(p, 'SYS; ATSIGN DRAGON_SYSENG; DRAGON\r')
    p.expect(':KILL')

    type(p, ':midas\r')
    p.expect_exact('MIDAS.')
    p.expect('\r\n')
    type(p, 'SYS; TS LOCK_SYSENG; LOCK\r')
    p.expect(':KILL')

    type(p, ':midas\r')
    p.expect_exact('MIDAS.')
    p.expect('\r\n')
    type(p, 'SYSBIN;_SYSENG; PEEK\r')
    p.expect(':KILL')
    type(p, 'peek\033j')
    p.expect('\r\n')
    type(p, '\033l')
    p.expect(' ')
    type(p, 'sysbin; peek bin\r')
    p.expect('\r\n\r\n')
    type(p, 'init\033g')
    p.expect_exact('$READY$')
    type(p, '\r:pdump sys; ts peek\r')
    p.expect('\r\n\r\n')
    type(p, '\033\030.')
    p.expect('\r\n')
    
    type(p, ':midas\r')
    p.expect_exact('MIDAS.')
    p.expect('\r\n')
    type(p, 'SYSBIN;_SYSENG; TECO\r')
    p.expect(':KILL')
    type(p, 'teco\033j')
    p.expect('\r\n')
    type(p, '\033l')
    p.expect(' ')
    type(p, 'sysbin; teco bin\r')
    p.expect('\r\n\r\n')
    type(p, 'purify\033g')
    p.expect_exact('$PURIFIED$')
    type(p, '\r:pdump sys; ts nteco\r')
    p.expect('\r\n\r\n')
    type(p, '\033\030.')
    p.expect('\r\n')
    
    type(p, ':lock\r')
    p.expect('_')
    type(p, '5down')
    p.expect_exact('DO YOU REALLY WANT THE SYSTEM TO GO DOWN?')
    type(p, 'Y')
    p.expect('_')
    type(p, '\032\033\030.')
    p.expect('\r\n')
    type(p, '\033\033u')
    
    p.expect('NOT IN OPERATION')
    p.close(force=True)

if __name__ == '__main__':
    main()
